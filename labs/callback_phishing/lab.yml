name: 2. Callback Phishing
description: Hunt for the fake invoice
details: |
  ## Brief

  Threat actors are sending Tyrell employees fake invoices, coercing them to call fake tech support phone numbers.

  If an end-user falls for this lure, they'll likely be instructed to install some fake helpdesk or remote-access software which often turns out to be an infostealer, or some other malware! This is sometimes referred to as a Telephone-orientated attack delivery (TOAD).

  These invoices are sent as attachments with free email providers, while also leveraging trusted brands.

  ---
  
  ## Focus Areas
  - Sender Email Characteristics
  - Attachment Content
  - Body Content
  - NLU

hints:
  - markdown: |
      For this lab, we want to focus on emails with a single PDF or image file attachment. We could use a snippet like the following to achieve this:
    source: |
      type.inbound
      
      // Single attachment
      and length(attachments) == 1

      // Attachment is an image or PDF
      and any(attachments,
        .file_type in $file_types_images or 
        .file_type == "pdf"
      )


  - markdown: |
      We could focus on predictable on commonly used invoice-related terms and the names of brands like this:
    source: |
      type.inbound

      // the attachment is a pdf with 1 page, and at least 60 ocr chars
      and any(attachments,
          .file_extension == "pdf"
          and any(file.explode(.), .scan.exiftool.page_count == 1)
          and any(file.explode(.), length(.scan.ocr.raw) > 60)

          // 4 of the following strings are found        
          and any(file.explode(.),
              4 of (
                  strings.icontains(.scan.ocr.raw, "purchase"),
                  strings.icontains(.scan.ocr.raw, "payment"),
                  strings.icontains(.scan.ocr.raw, "transaction"),
                  strings.icontains(.scan.ocr.raw, "subscription"),
                  strings.icontains(.scan.ocr.raw, "antivirus"),
                  strings.icontains(.scan.ocr.raw, "license"),
                  strings.icontains(.scan.ocr.raw, "order"),
                  strings.icontains(.scan.ocr.raw, "support"),
                  strings.icontains(.scan.ocr.raw, "help line"),
                  strings.icontains(.scan.ocr.raw, "contact"),
                  strings.icontains(.scan.ocr.raw, "receipt"),
                  strings.icontains(.scan.ocr.raw, "invoice"),
                  strings.icontains(.scan.ocr.raw, "call"),
                  strings.icontains(.scan.ocr.raw, "helpdesk"),
                  strings.icontains(.scan.ocr.raw, "cancel"),
                  strings.icontains(.scan.ocr.raw, "renew"),
                  strings.icontains(.scan.ocr.raw, "refund"),
                  regex.icontains(.scan.ocr.raw, '\+\d')
              )
          )

          // 1 of the following strings is found, representing common Callback brands          
          and any(file.explode(.),
              1 of (
                  strings.icontains(.scan.ocr.raw, "adobe"),
                  strings.icontains(.scan.ocr.raw, "geek squad"),
                  strings.icontains(.scan.ocr.raw, "lifelock"),
                  strings.icontains(.scan.ocr.raw, "best buy"),
                  strings.icontains(.scan.ocr.raw, "mcafee"),
                  strings.icontains(.scan.ocr.raw, "norton"),
                  strings.icontains(.scan.ocr.raw, "ebay"),
                  strings.icontains(.scan.ocr.raw, "paypal"),
              )
          )
      )
  
  - markdown: |
      We could filter out our results just to unsolicited emails from free email providers like this:
    source: |
      type.inbound

      // Unsolicited
      and not profile.by_sender().solicited
        
      // Sender is freemail
      and sender.email.domain.root_domain in $free_email_providers
  
  
  - markdown: |
      We could leverage NLU to detect callback scam content in either the attachment or the body of the email like this:
    source: |
      type.inbound

      and sender.email.domain.root_domain not in $org_domains

      and (
          any(attachments,
              (.file_type in $file_types_images or .file_type == "pdf")
              and any(file.explode(.),
                  // OCR of image or PDF suggests callback phishing
                  any(ml.nlu_classifier(.scan.ocr.raw).intents,
                      .name == "callback_scam" and .confidence == "high"
                  )
              )
          )
          // Body content suggests callback phishing
          or any(ml.nlu_classifier(body.current_thread.text).intents,
              .name in ("callback_scam")
              and .confidence == "high"
              and length(body.current_thread.text) < 1500
          )
      )
